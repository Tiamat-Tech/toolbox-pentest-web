#!/bin/bash
####################################################################
# Script to identify read access to a K8S resource using the current
# service account token and the current K8S API server references
# from a kubectl perspective.
#
# References used:
#	https://kubernetes.io/docs/reference/kubectl/
#
# Notes & conventions: 
#   K8S === KUBERNETES
#   NS  === NAMESPACE
####################################################################

# Constants
WORK="/tmp/names.txt"
OUT="/tmp/out.txt"
NAMESPACES=("default" "kube-system")
CURRENT_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

# Utility functions
function write_step(){
	echo -e "\e[93m$1\e[0m"
}

function check_result(){
    ns=$1
    res_name=$2
    is_error=$(grep -Fic "Error from server (Forbidden)" $OUT)
    if [ $is_error -eq 0 ]
    then
        printf "\n=>Namespace: %-20s - Resource: %-20s => ALLOWED.\n" $ns $res_name
		export RES_FOUND=YES
    fi
}

# Entry point & Main processing
unset RES_FOUND
write_step "[+] K8S context:"
env | grep -F "KUBERNETES"
write_step "[+] WhoAmI:"
kubectl auth whoami
write_step "[+] Authorizations summary via the 'auth can-i' kubectl feature:"
kubectl auth can-i --list=true
write_step "[+] Obtain the list of resource types exposed:"
kubectl api-resources --no-headers=true | cut -d' ' -f1 | sort -u > $WORK
wc -l $WORK
write_step "[+] Perform access tentatives..."
while IFS= read -r res_name
do
    printf "\rTest access to resource from different namespaces: %-50s" $res_name
    for ns in "${NAMESPACES[@]}"
    do
        kubectl get $res_name -n $ns 1>$OUT 2>&1
        check_result $ns $res_name
    done
    kubectl get $res_name 1>$OUT 2>&1
    check_result $CURRENT_NAMESPACE $res_name
    kubectl get $res_name -A 1>$OUT 2>&1
    check_result "ClusterScope" $res_name
done < $WORK
if [ "$RES_FOUND" == "" ]
then
	printf "\rNo access found.%-100s\n" " "
fi
unset RES_FOUND