#!/bin/bash
######################################################################
# Extract all API endpoints URLs from every JS files composing a SPA.
#
# Dependencies:
#    https://github.com/projectdiscovery/katana
#    https://pypi.org/project/jsbeautifier/
#    https://curl.se/
######################################################################
# Constants
URLS_PATTERNS=("['\"]\/[a-zA-Z0-9?=&_\-\/\{\}\(\):]+['\"]" "['\"][a-zA-Z0-9?=&_\-\/\{\}\(\):]+\/['\"]")
JS_SELECTION_PATTERN="(main|app|index)"
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
WORK_FILE="/tmp/work.tmp"
# Entry point
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
	echo "Usage:"
	echo "   $script_name [BASE_URL] [AUTHENTICATION_HEADER]"
	echo ""
	echo "AUTHENTICATION_HEADER is optional."
	echo ""
	echo "Call example:"
	echo "    $script_name https://righettod.eu"
	echo "    $script_name https://righettod.eu 'Cookie: JSESSIONID=1234'"
	echo "    $script_name https://righettod.eu 'Authorization: Bearer 1234'"
	exit 1
fi
# Utility functions
function write_step(){
    echo -e "\e[93m$1\e[0m"
}
# Main processing
if [ "$#" -eq 1 ]; then
	base=$1
	authentication_header="X-TEST: 1"
else
	base=$1
	authentication_header=$2
fi
rm $WORK_FILE* 2>/dev/null
write_step "[+] Extract the URLS of every JS files matching the pattern '$JS_SELECTION_PATTERN'..."
katana -silent -duc -u $base -H "$authentication_header" -em js | grep -Ei "$JS_SELECTION_PATTERN" > $WORK_FILE
if [ ! -s $WORK_FILE ]
then 
    echo "No scripts found!"
    exit 1
fi
urls_count=$(wc -l $WORK_FILE | cut -d' ' -f1)
echo "$urls_count scripts found!"
write_step "[+] Search and gather endpoints using severals patterns..."
while read -r url
do	
	curl -sk -H "Referer: $base" -H "$authentication_header" -A "$USER_AGENT" --output "$WORK_FILE.current" $url
	js-beautify "$WORK_FILE.current" > "$WORK_FILE.pretty"
	mv "$WORK_FILE.pretty" "$WORK_FILE.current"
	for pattern in ${URLS_PATTERNS[@]}; do
		grep -Po $pattern "$WORK_FILE.current" >> "$WORK_FILE.out"		
	done  
done < $WORK_FILE
write_step "[+] Unique endpoints found:"
cat "$WORK_FILE.out" | tr -d '"' | tr -d "'" | sort -u
rm $WORK_FILE* 2>/dev/null
