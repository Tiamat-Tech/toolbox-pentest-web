#!/bin/bash
###########################################################################
# Script to find the list of CVE for a software based on a CPE identifier.
#
# Its leverage the API provided by CVEDetails.com
# See https://www.cvedetails.com/documentation/apis
# See https://www.cvedetails.com/api/v1/swagger-ui/
#
# References used:
#	https://nmap.org/book/output-formats-cpe.html
#	https://en.wikipedia.org/wiki/Common_Platform_Enumeration
# 
# Require an API token.
#
# Requirements in terms of software:
# 	apt install jq curl miller
#
###########################################################################

# Constants
CVEDETAILS_API_BASE="https://www.cvedetails.com/api/v1"
WORK="/tmp/work.tmp"
RESULTS="/tmp/work.out"
MAX_LENGTH_FOR_SUMMARY=120


# Entry point
if [ "$#" -lt 1 ]; then
	script_name=$(basename "$0")
	echo "Usage:"
	echo "   $script_name [CPE_IN_FORMAT_2.3]"
	echo ""
	echo "Call example:"
	echo "    $script_name cpe:2.3:a:apache:airflow:2.9.2:rc1:*:*:*:*:*:*"
    exit 1
fi
cpe="$1"


# Utility functions
function write_step(){
	echo -e "\e[93m[*] $1\e[0m"
}

function write_step_failure(){
	echo -e "\e[91m[!] $1\e[0m"
}

function write_sub_step(){
	echo -e "\e[36m[i] $1\e[0m"
}


# Main processing
write_step "Check the presence of the access token..."
if [ "$CVEDETAILS_ACCESS_TOKEN" == "" ] 
then
	write_step_failure "Environment variable 'CVEDETAILS_ACCESS_TOKEN' not defined!"
	exit 1
else
	echo "OK."
fi
write_step "Retrieve the list of CVE for the CPE provided..."
curl -sk -H "Authorization: Bearer $CVEDETAILS_ACCESS_TOKEN" --output $WORK "$CVEDETAILS_API_BASE/vulnerability/list-by-cpe?cpe=$cpe&resultsPerPage=100&outputFormat=json"
cve_count=$(cat $WORK | jq -r ".results | length")
if [ $cve_count -eq 0 ]
then
	echo "No CVE found."
else
	echo "CVE,CVSSScore,ExploitExists,Summary" > $RESULTS
	has_more_than_100_cve=$(cat $WORK | jq -r '.hasMore')
	if [ "$has_more_than_100_cve" == "false" ]
	then
		write_sub_step "CVE count: $cve_count" 
	else
		write_sub_step "CVE count: More than 100."  		
	fi
	write_sub_step "Only display CVE with valid data." 
	jq -c ".results[]" $WORK | while read cve; do
		#Check if JSON object is a valid one
		echo "$cve" | jq "." 2>/dev/null 1>&2
		if [ $? -ne 0 ]
		then
			continue
		fi
		#Handle the JSON object
		cveId=$(echo "$cve" | jq -r ".cveId")
		cvssBaseScore=$(echo "$cve" | jq -r ".maxCvssBaseScore")
		exploitExists=$(echo "$cve" | jq -r ".exploitExists")
		exploitExistsStr="Yes"
		summary=$(echo "$cve" | jq -r ".summary" | head -c $MAX_LENGTH_FOR_SUMMARY)
		if [ "$exploitExists" == "0" ]
		then
			exploitExistsStr="No"
		fi
		echo "$cveId,$cvssBaseScore,$exploitExistsStr,\"$summary...\"" >> $RESULTS
	done
	mlr --icsv --opprint sort -r CVE $RESULTS
fi