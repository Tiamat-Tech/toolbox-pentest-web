#!/bin/bash
#############################################################################################
# Script to find missing HTTP response security headers based on
# the OWASP Secure Headers Project recommendations.
#
# Requirements in terms of software:
# 	apt install curl jq
#############################################################################################

# Constants
OSHP_JSON="/tools/dictionaries/oshp-headers.json"
OSHP_WORK_FILE="/tmp/oshp.txt"
WORK_FILE="/tmp/headers.txt"
USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"

# Entry point
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [BASE_URL] [AUTHENTICATION_HEADER]"
    echo ""
	echo "AUTHENTICATION_HEADER is optional."
	echo ""
    echo "Call example:"
	echo "    $script_name https://righettod.eu"
    echo "    $script_name https://righettod.eu 'Cookie: JSESSIONID=1234'"
	echo "    $script_name https://righettod.eu 'Authorization: Bearer 1234'"
    exit 1
fi

# Utility functions
function write_step(){
    echo -e "\e[93m$1\e[0m"
}

# Main processing
if [ "$#" -eq 1 ]; then
	app=$1
	authentication_header="X-TEST: 1"
else
	app=$1
	authentication_header=$2
fi
write_step "[+] Get OWASP Secure Headers Project recommendations..."
cat $OSHP_JSON | jq -r ".headers[].name" | grep -Ev "(Cache-Control|Clear-Site-Data|Pragma)" | sort -u > $OSHP_WORK_FILE
echo "Done: $(wc -l $OSHP_WORK_FILE | cut -d' ' -f1) headers retrieved."
write_step "[+] Get app response headers following any HTTP 30x redirections..."
curl -A "$USER_AGENT" -H "$authentication_header" -sk -o /dev/null --dump-header $WORK_FILE $app 
awk '!/^[[:space:]]*$/' $WORK_FILE
write_step "[+] Verify headers..."
for header in $(cat $OSHP_WORK_FILE)
do
	found=$(grep -Fic "$header:" $WORK_FILE)
	if [ $found -eq 0 ]
	then
		printf '\e[1;91m%s\e[m' "[Missing] "
	else
		printf '\e[1;92m%s\e[m' "[Present] "
	fi
	printf "%s\n" "$header"
done
write_step "[+] Remark about headers..."
none=0
found_csp_ro=$(grep -Fic "Content-Security-Policy-Report-Only" $WORK_FILE)
if [ $found_csp_ro -ne 0 ]
then
	found_csp_ro_reportto=$(grep -Fic "Content-Security-Policy-Report-Only" $WORK_FILE | grep -Fic "report-to")
	if [ $found_csp_ro_reportto -eq 0 ]
	then
		printf '\e[1;96m%s\e[m directive not specified into the CSP Report Only policy defined.\n' "report-to"	
	fi
	none=1
fi
found_csp=$(grep -Fic "Content-Security-Policy" $WORK_FILE)
found_csp_formaction=$(grep -Fi "Content-Security-Policy" $WORK_FILE | grep -Fic "form-action")
if [ $found_csp -ne 0 ] && [ $found_csp_formaction -eq 0 ];
then
	printf '\e[1;96m%s\e[m directive not specified into the CSP policy defined.\n' "form-action"
	none=1
fi
found_csp_frameancestors=$(grep -Fi "Content-Security-Policy" $WORK_FILE | grep -Fic "frame-ancestors")
if [ $found_csp -ne 0 ] && [ $found_csp_frameancestors -eq 0 ];
then
	printf '\e[1;96m%s\e[m directive not specified into the CSP policy defined.\n' "frame-ancestors"
	none=1
fi
found_csp_defaultsrc=$(grep -Fi "Content-Security-Policy" $WORK_FILE | grep -Fic "default-src")
if [ $found_csp -ne 0 ] && [ $found_csp_defaultsrc -eq 0 ];
then
	printf '\e[1;96m%s\e[m directive not specified into the CSP policy defined.\n' "default-src"
	none=1
fi
found_xfo=$(grep -Eic "X-Frame-Options:\s+(DENY|SAMEORIGIN)" $WORK_FILE)
if [ $found_xfo -eq 0 ] && [ $found_csp_frameancestors -eq 0 ];
then
	printf '\e[1;96m%s\e[m control headers incorrectly defined.\n' "Framing"
	none=1
fi
dm=$(echo "$app" | cut -d'/' -f3)
found_hstspreload=$(grep -Fi "Strict-Transport-Security" $WORK_FILE | grep -Fic "preload")
is_preloaded=$(curl -sk "https://hstspreload.org/api/v2/status?domain=$dm" | jq -r ".status" | grep -Fic "preloaded")
if [ $found_hstspreload -ne 0 ] && [ $is_preloaded -eq 0 ];
then
	printf '\e[1;96m%s\e[m Strict-Transport-Security instruction specified but the domain is not into the "hstspreload.org" list.\n' "preload"
	none=1
fi
if [ $none -eq 0 ]
then
	echo "None."
fi
rm $OSHP_WORK_FILE $WORK_FILE
