#!/usr/bin/env python
import requests
import hashlib
import argparse
from termcolor import colored
from tabulate import tabulate

"""
Script to detect the different proxies in place by abusing the "Max-Forwards" HTTP request header.

Based on the following tweet: https://twitter.com/irsdl/status/1337299267652825088

Doc on this header: http://webconcepts.info/concepts/http-header/Max-Forwards

"The 'Max-Forwards' header field provides a mechanism with the TRACE and OPTIONS request methods 
to limit the number of times that the request is forwarded by proxies."

Dependencies:
    pip3 install requests termcolor tabulate
"""

# Config
## Disable TLS warning when validation is disabled when requests is used
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# Constants 
## Define proxy to debug request sent using requests
PROXIES = { }

class ResponseData:
    def __init__(self, response, max_forwards_value):
        self.return_code = response.status_code
        self.body_length = len(response.text)
        self.body_content_hash = hashlib.sha1(response.text.encode("utf-8")).hexdigest()
        self.max_forwards_value = max_forwards_value
        content = ""
        self.server_header = "NA"
        for header in response.headers:
            if header.lower() == "server":
                self.server_header = response.headers[header]
            elif header.lower() not in ["date", "set-cookie", "expires", "etag", "last-modified", "content-length"]:
                content += f"{header}={response.headers[header]}"
        self.headers_hash = hashlib.sha1(content.encode("utf-8")).hexdigest()

def main(target_url, forwards_count):
    cases_result = []
    print(colored(f"[+] Execution context:", "magenta"))
    print(f"Full URL       : {target_url}")
    print(f"Forwards count : {forwards_count}")
    print(f"Proxy          : {PROXIES}")
    print(colored(f"[+] Send crafted requests trying the different forward counts...", "magenta"))
    results = []
    session = requests.Session()
    for t in range(forwards_count):
        req_max_forwards_value = str((t+1)) # Range is 0 indexed
        req_headers = {"Max-Forwards": req_max_forwards_value} 
        print(f"\rTesting with 'Max-Forwards' to {req_max_forwards_value}", end="", flush=True)
        response = session.options(target_url, headers=req_headers, verify=False, proxies=PROXIES, allow_redirects=False, timeout=10)
        results.append(ResponseData(response, req_max_forwards_value))
    print(colored(f"\n[+] Results:", "magenta"))
    data = []
    data.append(["Max-Forwards", "HTTP Code", "Body length", "Body hash", "Server header", "Headers hash"])
    for result in results:
        data.append([result.max_forwards_value, result.return_code, result.body_length, result.body_content_hash, result.server_header ,result.headers_hash])
    print(tabulate(data, headers="firstrow", tablefmt="github", numalign="center", stralign="center"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Script to detect the different proxies in place by abusing the 'Max-Forwards' HTTP request header.")
    required_params = parser.add_argument_group("required named arguments")
    required_params.add_argument("-t", action="store", dest="target_url", help="Target URL (ex: 'https://righettod.eu').", required=True)    
    parser.add_argument("-f", action="store", dest="forwards_count", type=int, help="Total count of forwards to test (ex: 5).", required=False, default="5") 
    parser.add_argument("-x", action="store", dest="proxy", help="Proxy to use for all probe requests (ex: 'http://127.0.0.1:8080', default to no proxy).", required=False, default=None) 
    args = parser.parse_args()  
    if args.proxy is not None:
        PROXIES = { "http": args.proxy, "https": args.proxy } 
    main(args.target_url, args.forwards_count)

