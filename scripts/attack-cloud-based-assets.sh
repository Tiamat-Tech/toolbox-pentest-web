#!/bin/bash
#############################################################################################
# Script to find, as much as possible attack surface, on Cloud based services (AWS/AZURE/GCP) 
# using the output of the script "identify-cloud-based-assets.sh" as source of assets:
# https://github.com/righettod/toolbox-pentest-web/blob/master/scripts/identify-cloud-based-assets.sh
#
# Requirements in terms of software:
#	https://github.com/robertdavidgraham/masscan
#	https://github.com/projectdiscovery/nuclei
# 	https://github.com/projectdiscovery/httpx
# 	apt install jq nmap
#
# Remark:
#	Focus was made on reliability of data retrieved over the performance aspects.
#############################################################################################

# Constants
WORK_FILE="/tmp/work.txt"
ASSETS_WORK_FILE="/tmp/assets.txt"
THREAD_COUNT=10
GO_BIN_HOME="/root/go/bin"
CSV_FILE="attack-surface.csv"
CSV_FILE_HEADERS="Provider,Subdomain,IPv4,NucleiTemplate,NucleiTemplateType,Location,NucleiTemplateMatcher,Severity,NucleiTemplateDesc,NucleiTemplateURL,OpenTCPPorts"
NUCLEI_TRACE_FILE="nuclei_trace.txt"
NUCLEI_MIN_SEVERITY="info"
MASSCAN_TRACE_FILE="masscan_trace.txt"
MASSCAN_WORK_FILE="/tmp/masscanwork.txt"

# Entry point
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [ASSETS_CSV_FILE]"
    echo ""
    echo "Call example:"
    echo "    $script_name /tmp/assets.csv"
    exit 1
fi

# Utility functions
function write_step(){
    echo -e "\e[93m$1\e[0m"
}

# Remove the first line with the headers
asset_file=$1
cp $asset_file $ASSETS_WORK_FILE
sed -i '1d' $ASSETS_WORK_FILE 
asset_file=$ASSETS_WORK_FILE
# Main processing
write_step "[Discovery] Identify valid HTTP domains..."
cat $asset_file | cut -d',' -f2 > $WORK_FILE
$GO_BIN_HOME/httpx -duc -silent -random-agent -follow-redirects -title -t $THREAD_COUNT -rl $THREAD_COUNT -list $WORK_FILE -json > $WORK_FILE.tmp
if [ ! -s $WORK_FILE.tmp ]
then 
    echo "No domains found!"
    exit 1
fi
mv $WORK_FILE.tmp $WORK_FILE
domains_count=$(cat $WORK_FILE | wc -l)
echo "$domains_count domain(s) identified."
write_step "[Scanning ] Identify web attack surface exposed by valid HTTP domains..."
echo "[i] See file '$NUCLEI_TRACE_FILE' for nuclei raw results in case of later need."
while IFS= read -r line
do
	echo "$line" | jq -r ".url" >> $WORK_FILE.tmp		
done < "$WORK_FILE"
mv $WORK_FILE.tmp $WORK_FILE
$GO_BIN_HOME/nuclei -duc -silent -follow-redirects -exclude-type "dns,whois" -no-httpx -no-mhe -rl $THREAD_COUNT -concurrency $THREAD_COUNT -scan-strategy auto -severity $NUCLEI_MIN_SEVERITY -list $WORK_FILE -jsonl > $NUCLEI_TRACE_FILE
if [ ! -s $NUCLEI_TRACE_FILE ]
then 
    echo "No exposed attack surface found!"
    exit 1
fi
findings_count=$(cat $NUCLEI_TRACE_FILE | wc -l)
echo "$findings_count finding(s) identified."
write_step "[Scanning ] Identify open TCP ports exposed by each assets..."
echo "[i] See file '$MASSCAN_TRACE_FILE' for masscan raw results in case of later need."
rm $MASSCAN_WORK_FILE $MASSCAN_TRACE_FILE 2>/dev/null
while IFS= read -r line
do	
    ipv4=$(echo $line | cut -d',' -f3)
    subdomain=$(echo $line | cut -d',' -f2)    
    masscan $ipv4 -p0-65535 --max-rate 100 -oL $MASSCAN_WORK_FILE
    awk -v sbd=$subdomain '(index($0, "open tcp") != 0) {print sbd " " $0;}' $MASSCAN_WORK_FILE >> $MASSCAN_TRACE_FILE
done < "$asset_file"
write_step "[Gathering] Assemble the final CSV file '$CSV_FILE'..."
while IFS= read -r line
do
    tpl_id=$(echo "$line" | jq -r '."template-id"')
    tpl_type=$(echo "$line" | jq -r '.type')
    tpl_url=$(echo "$line" | jq -r '."template-url"')
    tpl_desc=$(echo "$line" | jq -r '.info.name')
    host=$(echo "$line" | jq -r '.host' | awk -F// '{print $NF}' | cut -d':' -f1)
    ip=$(echo "$line" | jq -r '.ip')  
    severity=$(echo "$line" | jq -r '.info.severity')
    host_pattern="$host.*"
    provider=$(grep -E $host_pattern $asset_file | head -1 | cut -d',' -f1)    
    has_matcher_name=$(echo "$line" | grep -Fc "matcher-name")
    if [ "$has_matcher_name" != "0" ]
    then
        matcher_name=$(echo "$line" | jq -r '."matcher-name"')
    else
        matcher_name="NA"        
    fi
    has_matcher_at=$(echo "$line" | grep -Fc "matcher-at")
    if [ "$has_matcher_name" != "0" ]
    then
        matched_at=$(echo "$line" | jq -r '."matched-at"')
    else
        matched_at="NA"        
    fi
    tcp_open_ports=$(grep -E $host_pattern $MASSCAN_TRACE_FILE | cut -d" " -f4 | sort | tr "\n" " ")
    echo "\"$provider\",\"$host\",\"$ip\",\"$tpl_id\",\"$tpl_type\",\"$matched_at\",\"$matcher_name\",\"$severity\",\"$tpl_desc\",\"$tpl_url\",\"$tcp_open_ports\"" >> $WORK_FILE.tmp
done < "$NUCLEI_TRACE_FILE"
echo $CSV_FILE_HEADERS > $WORK_FILE
cat $WORK_FILE.tmp | sort -u >> $WORK_FILE
mv $WORK_FILE $CSV_FILE
rm $MASSCAN_WORK_FILE $ASSETS_WORK_FILE

